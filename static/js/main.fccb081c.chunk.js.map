{"version":3,"sources":["components/Header.js","components/Content.js","components/App.js","index.js"],"names":["useStyles","makeStyles","theme","navStyle","backgroundColor","color","Header","classes","AppBar","position","className","Toolbar","IconButton","edge","aria-label","Typography","variant","containerStyle","padding","textField","width","borderRadius","marginRight","buttonStyle","weatherContent","marginTop","boxStyle","boxShadow","height","whiteFont","mt100","Content","useState","country","setCountry","weatherData","setWeatherData","isVisible","setVisible","error","setError","isLoaded","setIsLoaded","errorClass","classnames","loadingClass","Grid","container","TextField","onChange","event","value","target","Button","onClick","fetch","then","response","json","data","cod","rain","weather","main","wind","visibility","message","item","xs","Box","component","m","icon","src","alt","Math","round","temp","_","upperFirst","lowerCase","upperCase","description","humidity","pressure","gridResult","App","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.fccb081c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  navStyle: {\r\n    backgroundColor: \"#192733\",\r\n    color: \"#fff\"\r\n  }\r\n}));\r\n\r\nconst Header = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      <AppBar position=\"static\" className={classes.navStyle}>\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" aria-label=\"menu\"></IconButton>\r\n          <Typography variant=\"h5\">GET WEATHER</Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState } from \"react\";\r\nimport classnames from 'classnames'\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport _ from \"lodash\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  containerStyle: {\r\n    padding: \"20px 37px\"\r\n  },\r\n  textField: {\r\n    width: \"300px\",\r\n    backgroundColor: \"#fff\",\r\n    borderRadius: \"5px\",\r\n    marginRight: \"20px\"\r\n  },\r\n  buttonStyle: {\r\n    backgroundColor: \"#7c77fe\",\r\n    color: \"#fff\"\r\n  },\r\n  weatherContent: {\r\n    marginTop: \"20px\"\r\n  },\r\n  boxStyle: {\r\n    backgroundColor: \"#7c77fe\",\r\n    color: \"#333\",\r\n    borderRadius: \"10px\",\r\n    boxShadow: \"8px 8px rgb(108,112,119)\",\r\n    height: \"120px\",\r\n    padding: \"20px\"\r\n  },\r\n  whiteFont: {\r\n    color: \"#fff\",\r\n    padding: \"5px\"\r\n  },\r\n  mt100: {\r\n    marginTop: \"100px\"\r\n  }\r\n}));\r\n\r\nconst Content = () => {\r\n  const classes = useStyles();\r\n  const [country, setCountry] = useState(\"\");\r\n  const [weatherData, setWeatherData] = useState({});\r\n  const [isVisible, setVisible] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const errorClass = classnames(classes.whiteFont, classes.mt100);\r\n  const loadingClass = classnames(classes.whiteFont, classes.mt100);\r\n\r\n  const imgIcon = (icon) => {\r\n    return (\r\n      <img\r\n        src={\"http://openweathermap.org/img/wn/\" + icon + \".png\"}\r\n        alt={country}\r\n        width={100}\r\n      />\r\n    );\r\n  };\r\n\r\n  const gridResult = () => {\r\n    if (error) {\r\n      return (\r\n        <div>\r\n          <h1 className={errorClass}>\r\n            This {error.message}.\r\n          </h1>\r\n        </div>\r\n      );\r\n    } else if (!isLoaded) {\r\n      return (\r\n        <div>\r\n          <h1 className={loadingClass}>Loading...</h1>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div>\r\n          <Grid container className={classes.weatherContent}>\r\n            <Grid item xs={8}>\r\n              <Box component=\"div\" m={1} className={classes.boxStyle}>\r\n                <Grid container>\r\n                  <Grid item xs={6}>\r\n                    {imgIcon(weatherData.icon)}\r\n                  </Grid>\r\n                  <Grid item xs={6}>\r\n                    <h1>\r\n                      {Math.round(weatherData.temp - 273.15) + \" Â°C\"}\r\n                    </h1>\r\n                    <p>{_.upperFirst(_.lowerCase(country))}</p>\r\n                    <p className={classes.whiteFont}>\r\n                      {_.upperCase(weatherData.description)}\r\n                    </p>\r\n                  </Grid>\r\n                </Grid>\r\n              </Box>\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n              <Box component=\"div\" m={1} className={classes.boxStyle}>\r\n                <p className={classes.whiteFont}>HUMIDITY</p>\r\n                <h1>{weatherData.humidity + \"%\"}</h1>\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container className={classes.weatherContent}>\r\n            <Grid item xs={4}>\r\n              <Box component=\"div\" m={1} className={classes.boxStyle}>\r\n                <h1>VISIBILITY</h1>\r\n                <p>{weatherData.visibility  + \"km\"}</p>\r\n              </Box>\r\n            </Grid>\r\n           { weatherData.rain && (<Grid item xs={4}>\r\n              <Box component=\"div\" m={1} className={classes.boxStyle}>\r\n                <h1>RAIN</h1>\r\n                <p>{weatherData.rain + \"mm/h\"}</p>\r\n              </Box>\r\n            </Grid>)}\r\n            <Grid item xs={4}>\r\n              <Box component=\"div\" m={1} className={classes.boxStyle}>\r\n                <h1>Pressure</h1>\r\n                <p>{weatherData.pressure + \"hPa\"}</p>\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    const value = event.target.value;\r\n    setVisible(false);\r\n    setCountry(value);\r\n    setError(null);\r\n  };\r\n\r\n  const handleClick = () => {\r\n    const api_url =\r\n      \"https://api.openweathermap.org/data/2.5/weather?q=\" +\r\n      country +\r\n      \"&appid=\" +\r\n      process.env.REACT_APP_API_KEY;\r\n\r\n    fetch(api_url)\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then(\r\n        (data) => {\r\n          setIsLoaded(true);\r\n          if (data.cod === 200) {\r\n            const rain = data.rain ?  data.rain[\"1h\"] : null;\r\n            setWeatherData({ ...data.weather[0], ...data.main, ...data.wind, ...{visibility: data.visibility, rain}});\r\n          } else {\r\n            setError(data);\r\n          }\r\n        },\r\n        (error) => {\r\n          setIsLoaded(true);\r\n          setError(error);\r\n        }\r\n      );\r\n    setVisible(true);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.containerStyle}>\r\n      <Grid container>\r\n        <TextField\r\n          className={classes.textField}\r\n          variant=\"outlined\"\r\n          onChange={handleChange}\r\n          value={isVisible ? \"\" : country}\r\n        />\r\n        <Button\r\n          variant=\"contained\"\r\n          className={classes.buttonStyle}\r\n          onClick={handleClick}\r\n        >\r\n          Search\r\n        </Button>\r\n      </Grid>\r\n      {isVisible && gridResult()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Content;\r\n","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport Content from \"./Content\";\r\nimport \"../styles.css\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header className=\"nav-style\" />\r\n      <Content />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\n\r\nReactDOM.render(<App />,rootElement);\r\n"],"sourceRoot":""}